import java.awt.*;
import java.awt.event.*;
import java.io.IOException;

import javax.swing.*;

@SuppressWarnings("serial")
public class mineGUI extends JFrame implements ActionListener {

	private button2 mineButtons[][] = new button2[10][10];
	private GridLayout mineBoard, infoBoard;
	private Container boardContainer;
	private JOptionPane dialogs;
	private JMenuBar topMenu;
	private JMenu gameMenu, hMenu;
	private JMenuItem gReset, gTopTen, gClearHS, gExit, hHelp, hAbout;
	
	
	private JButton resetButton;
	private JLabel timeElapsed, buttonsLeft, timeLabel, buttonLabel;
	
	

	public mineGUI()  {

		super("Minesweeper");// set up new JFrame for game
		setSize(480, 720);// set game size to 480x720

		
		topMenu = new JMenuBar();// create menu bar
		setJMenuBar(topMenu);// set menu bar on frame

		gameMenu = new JMenu("Game");// create game menu
		topMenu.add(gameMenu);// add game menu

		// Initialize each member of menu item.
		// add them to the menu,set a mnemonic for keyboard interaction
		// depending on
		// title name.
		// add actionListener to register human interaction
		// repeat for next items
		gReset = new JMenuItem("Reset");
		gameMenu.add(gReset);
		gReset.setMnemonic(KeyEvent.VK_R);
		gReset.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R,
				ActionEvent.ALT_MASK));
		gReset.addActionListener(this);
		gameMenu.addSeparator();

		gTopTen = new JMenuItem("Top Ten");
		gameMenu.add(gTopTen);
		gTopTen.setMnemonic(KeyEvent.VK_T);
		gTopTen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_T,
				ActionEvent.ALT_MASK));
		gTopTen.addActionListener(this);

		gClearHS = new JMenuItem("Clear High Scores");
		gameMenu.add(gClearHS);
		gClearHS.setMnemonic(KeyEvent.VK_C);
		gClearHS.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,
				ActionEvent.ALT_MASK));
		gClearHS.addActionListener(this);
		gameMenu.addSeparator();

		gExit = new JMenuItem("Exit");
		gExit.setMnemonic(KeyEvent.VK_X);
		gExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,
				ActionEvent.ALT_MASK));
		gExit.addActionListener(this);
		gameMenu.add(gExit);

		// create menu 2 of 2
		hMenu = new JMenu("Help");
		topMenu.add(hMenu);

		// same as other menu, just different names
		hHelp = new JMenuItem("Help");
		hHelp.setMnemonic(KeyEvent.VK_H);
		hHelp.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H,
				ActionEvent.ALT_MASK));
		hHelp.addActionListener(this);
		hMenu.add(hHelp);
		hMenu.addSeparator();

		hAbout = new JMenuItem("About");
		hAbout.setMnemonic(KeyEvent.VK_A);
		hAbout.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,
				ActionEvent.ALT_MASK));
		hAbout.addActionListener(this);
		hMenu.add(hAbout);

		// the UI will have 2 JPanels-1 grid layout and 1 plain panel
		// that will display game information
		JPanel mboard = new JPanel(new GridLayout(10, 10));

		// create panel that will contain previous two panels
		// place that in a box layout so that they can be placed on top of each
		// other without having to do much realignment
		JPanel top = new JPanel();

		JPanel container = new JPanel();
		container.setLayout(new BoxLayout(container, BoxLayout.Y_AXIS));

		// these initialize the information that will be displayed in the top
		// panel.time, reset button and buttons left
		timeLabel = new JLabel("Time: ");
		top.add(timeLabel);

		timeElapsed = new JLabel("0:0");
		top.add(timeElapsed);

		resetButton = new JButton("Reset");
		resetButton.addActionListener(this);
		top.add(resetButton);

		buttonLabel = new JLabel("Mines Left: ");
		top.add(buttonLabel);

		buttonsLeft = new JLabel("10");
		top.add(buttonsLeft);

		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {
				mineButtons[i][j] = new button2();
				mineButtons[i][j].setPreferredSize(new Dimension(20, 20));
				mboard.add(mineButtons[i][j]);
				mineButtons[i][j].setX(i);
				mineButtons[i][j].setY(j);
				
			}
		}
		container.add(top);
		container.add(mboard);
		add(container);
		setVisible(true);
	}

	
	
	

	

	

	
	
	

	
	

	

	

	public void actionPerformed(ActionEvent e) {

		if (e.getSource() == gReset) {
			
			System.out.println("Reset Pressed");

		}

		else if (e.getSource() == gTopTen) {
			
			
		}

		else if (e.getSource() == gExit) {
			System.out.println("Exit");
			System.exit(0);
		} else if (e.getSource() == hHelp) {
			JOptionPane
					.showMessageDialog(
							mineGUI.this,
							"The game will start when you left click on the game board \n"
									+ "Left clicking will reveal a mine or the number of adjacent mines \n"
									+ "Right clicking will first indicate that that location hides a mine \n"
									+ "Right clicking again will indicate that there might be a mine there\n"
									+ "To win the game,  mark the 10 mines and clear the other 90 squares \n",
							"Help", JOptionPane.PLAIN_MESSAGE);

		} else if (e.getSource() == hAbout) {
			JOptionPane.showMessageDialog(mineGUI.this,
					"CS 342 Project Two-Minesweeper \n" + " Authors: \n"
							+ "Tianniu Lei(tlei2) \n"
							+ "Ryan Szymkiewicz(szymkie1) \n", "About",
					JOptionPane.PLAIN_MESSAGE);
		} else if (e.getSource() == resetButton) {
			
			System.out.println("Reset Button Pressed.");

		} else {
			System.out.println(e);
		}

	}
	
}

	

